#!/bin/bash

has_command() {
  command -v $1 > /dev/null \
    && printf "\r${2-\n}\033[2K[ \033[00;32m$1\033[0m ]\n" && return 0 \
    || printf "\r${2-\n}[ \033[00;34m$1 (skipped)\033[0m ]\n" && return 1
}

has_command apt '' \
  && sudo apt update \
  && sudo apt -y upgrade \
  && sudo apt full-upgrade \
  && sudo apt autoremove \
  && sudo apt autoclean

has_command dnf \
  && sudo dnf up

PYTHON_VERSION_PREFIX=3
if has_command pyenv; then
  pyenv update
  pyenv install --skip-existing ${PYTHON_VERSION_PREFIX}
  PYTHON_LATEST="$(pyenv prefix ${PYTHON_VERSION_PREFIX} 2> /dev/null)"
  PYTHON_PIPX="$(pyenv virtualenv-prefix pipx_default_python 2> /dev/null)"
  if [ -n "${PYTHON_LATEST}" ] && [ "${PYTHON_LATEST}" != "${PYTHON_PIPX}" ]; then
    PIPX_UPGRADED_PYTHON="$(pyenv latest ${PYTHON_VERSION_PREFIX})"
    pyenv virtualenv-delete -f pipx_default_python
    pyenv virtualenv "${PIPX_UPGRADED_PYTHON}" pipx_default_python
  fi
fi

has_command pipx \
  && ([ -n "${PIPX_UPGRADED_PYTHON}" ] && pipx reinstall-all --python "$(pyenv prefix pipx_default_python)/bin/python" || pipx upgrade-all --include-injected)

has_command vim \
  && vim +PlugUpgrade +PlugUpdate +qall

has_command rclone \
  && rclone selfupdate

has_command flatpak \
  && flatpak update -y

has_command fwupdmgr \
  && fwupdmgr get-updates -y > /dev/null \
  && echo "Consider upgrading firmware: 'fwupdmgr get-updates && fwupdmgr update'"
